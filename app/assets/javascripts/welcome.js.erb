// Place all the behaviors and hooks related to the matching controller here.
// All this logic will automatically be available in application.js.
// You can use CoffeeScript in this file: http://coffeescript.org/
//= require game_logic.js

var input = "";
var o_input;
var b, r ,g;

var ft = true;
  //first try on joining game
var game_id = -1;
var id = "";
var game_text;
var opponent;

var playing = true;
var won     = false;

var ready = false;

var current_game = new GameLogic;

var opp_sprite;

$(document).ready(function() {
  $('input').bind('input propertychange', function () {
    o_input = true;
    input = $('#in').val();
  });
});

function init()
{
  console.log("Waiting to join a new game");
  if( game_id == -1)
  {
    $.ajax({
      url: '/join_game',
      type: 'PATCH',
      async: false,
      data: {name:"Foo", first_try:ft, me:id},
      success:function(json)
      {
        console.log(json);
        game_id   = json.g_id;
        id        = json.my_id;
        game_text = json.g_text;
        ft        = false;
        setTimeout(init, Math.random()*100);
      }
    });
  }
  else
  {
    console.log("Found other player");
    current_game.game_text = "Waiting for other player";
    current_game.update_line();
    opp_sprite.visible = true;
    o_input = true;
    ready_set_go();
  }
}//end init


function ready_set_go()
{
  if( ! ready )
  {
    $.ajax({
        url: '/ready',
        type: 'GET',
        async: false,
        data: {my_id:id},
        success:function(responce)
        {
          console.log("Ready: " + responce.ready);
          ready = responce.ready
        }
    });
    setTimeout(ready_set_go, Math.random()*100);
  }
  else
  {
    current_game.game_text = this.game_text;
    current_game.update_line();
    o_input = true;
    update_game();
  }
}//end ready_set_go


var game = new Phaser.Game(800,400, Phaser.CANVAS, 'gameDiv', { preload: preload, create: create, update: update });

function preload() {
  game.stage.backgroundColor = '#f7f7f7';
  game.load.image('user','<%= asset_path 'yourWelcomeJacob.png' %>');
  game.load.image('opponent','<%= asset_path 'sierrasShark.png' %>');
}

function update_game()
{
  if( playing )
  {
    $.ajax({
      url: '/do_update',
      type: 'GET',
      async: false,
      data: {game_id:game_id, my_id:id, my_pos:u_sprite.x, my_won:won},
      success:function(responce)
      {
        console.log(responce);
        opp_sprite.x = responce.pos;
        playing  = !responce.win;
        setTimeout(update_game, Math.random()*100);
      }
    });
  }
  else
  {
    if( won )
    {
      current_game.game_text = "Winner winner chicken dinner";
      current_game.update_line();
      o_input = true;
    }
    else
    {
      current_game.game_text = "Lost =(";
      current_game.update_line();
      o_input = true;
    }
    //TODO add logic to play again
  }
}

var u_sprite, bg,t;

function create() {

    init("Looking for other players");

    game.world.width = 800;
    game.world.height = 400;

    bg = game.add.graphics(0, 0);
    bg.beginFill(0xf7f7f7, 1);
    bg.drawRect(0, 0, game.world.width, game.world.height);
    bg.endFill();

    u_sprite = game.add.sprite(0,200,'user');
    opp_sprite = game.add.sprite(0, 300,'opponent');
    u_sprite.inputEnabled = true;
    opp_sprite.inputEnabled = true;
    opp_sprite.visible = false;

    var tr = current_game.process_input(input);
    var grey  = tr.gray;
    var red   = tr.red;
    var black = tr.black;

    var style_b = { font: "25px Helvetica", fill: "#00000",  align: "left" };
    var style_r = { font: "25px Helvetica", fill: "#ff0000", align: "left" };
    var style_g = { font: "25px Helvetica", fill: "#C8C7C7", align: "left" };

    b = game.add.text(0, 0, black, style_b);
    r = game.add.text(b.width, 0, red, style_r);
    g = game.add.text(0, 0,grey,style_g);
    //set to zero because there should not be any input on init
}

function update() {

  if( o_input )
  {
    var to_render = current_game.process_input(input);
    document.getElementById("wpm").innerHTML = "WPM: " + Math.round(wpm);
    b.setText(to_render.black);
    r.setText(to_render.red);
    r.x = b.width;
    g.setText(to_render.gray);
    g.x = (b.width + r.width) -2 ;

    if (clear)
    {
      document.getElementById("in").value = '';
      clear = false;
    }

    u_sprite.x += (to_render.advance) ? (800/game_text.split(" ").length) : 0;

    if(u_sprite.x > game_text.split(" ").length - 20)
    {
      won = true;
    }
    o_input = false;
  }

}

