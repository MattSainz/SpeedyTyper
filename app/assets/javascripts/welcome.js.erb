// Place all the behaviors and hooks related to the matching controller here.
// All this logic will automatically be available in application.js.
// You can use CoffeeScript in this file: http://coffeescript.org/
//= require game_logic.js

var input = "";
var o_input;
var b, r ,g;

$(document).ready(function() {
    $('input').bind('input propertychange', function () {
        o_input = true;
        input = $('#in').val();
        console.log(input);
    });
});

var game = new Phaser.Game(800,400, Phaser.CANVAS, 'gameDiv', { preload: preload, create: create, update: update });

function preload() {
    game.stage.backgroundColor = '#f7f7f7';
    game.load.image('user','<%= asset_path 'Untitled.png' %>');
}

var u_sprite, bg,t;

function create() {
    game.world.width = 800;
    game.world.height = 400;

    bg = game.add.graphics(0, 0);
    bg.beginFill(0xf7f7f7, 1);
    bg.drawRect(0, 0, game.world.width, game.world.height);
    bg.endFill();

    u_sprite = game.add.sprite(0,200,'user');
    u_sprite.inputEnabled = true;

    var tr = GameLogic.process_input(input);
    var grey  = tr.gray;
    var red   = tr.red;
    var black = tr.black;

    var style_b = { font: "25px Helvetica", fill: "#00000",  align: "left" };
    var style_r = { font: "25px Helvetica", fill: "#ff0000", align: "left" };
    var style_g = { font: "25px Helvetica", fill: "#C8C7C7", align: "left" };

    b = game.add.text(0, 0, black, style_b);
    r = game.add.text(b.width, 0, red, style_r);
    g = game.add.text(0, 0,grey,style_g);
    //set to zero because there should not be any input on init

}

function update() {
    if( o_input )
    {
        var to_render = GameLogic.process_input(input);
        document.getElementById("wpm").innerHTML = "WPM: " + Math.round(wpm);
        b.setText(to_render.black);
        r.setText(to_render.red);
        r.x = b.width;
        g.setText(to_render.gray);
        g.x = (b.width + r.width) -2 ;
        if (clear)
        {
            document.getElementById("in").value = '';
            clear = false;
        }

        u_sprite.x += (to_render.advance) ? (800/get_text().split(" ").length) : 0;
        o_input = false;
    }
}


